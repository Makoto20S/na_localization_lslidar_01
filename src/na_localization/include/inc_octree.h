// Generated by gencpp from file grid_map/inc_octree.msg
// DO NOT EDIT!


#ifndef GRID_MAP_MESSAGE_INC_OCTREE_H
#define GRID_MAP_MESSAGE_INC_OCTREE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Int8MultiArray.h>

namespace grid_map
{
template <class ContainerAllocator>
struct inc_octree_
{
  typedef inc_octree_<ContainerAllocator> Type;

  inc_octree_()
    : robotID()
    , time(0.0)
    , poseX(0.0)
    , poseY(0.0)
    , poseZ(0.0)
    , poseRoll(0.0)
    , posePitch(0.0)
    , poseYaw(0.0)
    , imuAvailable(0)
    , incr_octree()  {
    }
  inc_octree_(const ContainerAllocator& _alloc)
    : robotID(_alloc)
    , time(0.0)
    , poseX(0.0)
    , poseY(0.0)
    , poseZ(0.0)
    , poseRoll(0.0)
    , posePitch(0.0)
    , poseYaw(0.0)
    , imuAvailable(0)
    , incr_octree(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _robotID_type;
  _robotID_type robotID;

   typedef double _time_type;
  _time_type time;

   typedef float _poseX_type;
  _poseX_type poseX;

   typedef float _poseY_type;
  _poseY_type poseY;

   typedef float _poseZ_type;
  _poseZ_type poseZ;

   typedef float _poseRoll_type;
  _poseRoll_type poseRoll;

   typedef float _posePitch_type;
  _posePitch_type posePitch;

   typedef float _poseYaw_type;
  _poseYaw_type poseYaw;

   typedef int32_t _imuAvailable_type;
  _imuAvailable_type imuAvailable;

   typedef  ::std_msgs::Int8MultiArray_<ContainerAllocator>  _incr_octree_type;
  _incr_octree_type incr_octree;





  typedef boost::shared_ptr< ::grid_map::inc_octree_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::grid_map::inc_octree_<ContainerAllocator> const> ConstPtr;

}; // struct inc_octree_

typedef ::grid_map::inc_octree_<std::allocator<void> > inc_octree;

typedef boost::shared_ptr< ::grid_map::inc_octree > inc_octreePtr;
typedef boost::shared_ptr< ::grid_map::inc_octree const> inc_octreeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::grid_map::inc_octree_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::grid_map::inc_octree_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::grid_map::inc_octree_<ContainerAllocator1> & lhs, const ::grid_map::inc_octree_<ContainerAllocator2> & rhs)
{
  return lhs.robotID == rhs.robotID &&
    lhs.time == rhs.time &&
    lhs.poseX == rhs.poseX &&
    lhs.poseY == rhs.poseY &&
    lhs.poseZ == rhs.poseZ &&
    lhs.poseRoll == rhs.poseRoll &&
    lhs.posePitch == rhs.posePitch &&
    lhs.poseYaw == rhs.poseYaw &&
    lhs.imuAvailable == rhs.imuAvailable &&
    lhs.incr_octree == rhs.incr_octree;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::grid_map::inc_octree_<ContainerAllocator1> & lhs, const ::grid_map::inc_octree_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace grid_map

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::grid_map::inc_octree_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grid_map::inc_octree_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grid_map::inc_octree_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grid_map::inc_octree_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grid_map::inc_octree_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grid_map::inc_octree_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::grid_map::inc_octree_<ContainerAllocator> >
{
  static const char* value()
  {
    return "86db944f7ecb1cf3b9183b92f7a47758";
  }

  static const char* value(const ::grid_map::inc_octree_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x86db944f7ecb1cf3ULL;
  static const uint64_t static_value2 = 0xb9183b92f7a47758ULL;
};

template<class ContainerAllocator>
struct DataType< ::grid_map::inc_octree_<ContainerAllocator> >
{
  static const char* value()
  {
    return "grid_map/inc_octree";
  }

  static const char* value(const ::grid_map::inc_octree_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::grid_map::inc_octree_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string robotID\n"
"float64 time\n"
"float32 poseX\n"
"float32 poseY\n"
"float32 poseZ\n"
"float32 poseRoll\n"
"float32 posePitch\n"
"float32 poseYaw\n"
"int32 imuAvailable\n"
"std_msgs/Int8MultiArray incr_octree\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Int8MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"int8[]            data          # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayLayout\n"
"# The multiarray declares a generic multi-dimensional array of a\n"
"# particular data type.  Dimensions are ordered from outer most\n"
"# to inner most.\n"
"\n"
"MultiArrayDimension[] dim # Array of dimension properties\n"
"uint32 data_offset        # padding elements at front of data\n"
"\n"
"# Accessors should ALWAYS be written in terms of dimension stride\n"
"# and specified outer-most dimension first.\n"
"# \n"
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n"
"#\n"
"# A standard, 3-channel 640x480 image with interleaved color channels\n"
"# would be specified as:\n"
"#\n"
"# dim[0].label  = \"height\"\n"
"# dim[0].size   = 480\n"
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n"
"# dim[1].label  = \"width\"\n"
"# dim[1].size   = 640\n"
"# dim[1].stride = 3*640 = 1920\n"
"# dim[2].label  = \"channel\"\n"
"# dim[2].size   = 3\n"
"# dim[2].stride = 3\n"
"#\n"
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayDimension\n"
"string label   # label of given dimension\n"
"uint32 size    # size of given dimension (in type units)\n"
"uint32 stride  # stride of given dimension\n"
;
  }

  static const char* value(const ::grid_map::inc_octree_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::grid_map::inc_octree_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robotID);
      stream.next(m.time);
      stream.next(m.poseX);
      stream.next(m.poseY);
      stream.next(m.poseZ);
      stream.next(m.poseRoll);
      stream.next(m.posePitch);
      stream.next(m.poseYaw);
      stream.next(m.imuAvailable);
      stream.next(m.incr_octree);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct inc_octree_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::grid_map::inc_octree_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::grid_map::inc_octree_<ContainerAllocator>& v)
  {
    s << indent << "robotID: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.robotID);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "poseX: ";
    Printer<float>::stream(s, indent + "  ", v.poseX);
    s << indent << "poseY: ";
    Printer<float>::stream(s, indent + "  ", v.poseY);
    s << indent << "poseZ: ";
    Printer<float>::stream(s, indent + "  ", v.poseZ);
    s << indent << "poseRoll: ";
    Printer<float>::stream(s, indent + "  ", v.poseRoll);
    s << indent << "posePitch: ";
    Printer<float>::stream(s, indent + "  ", v.posePitch);
    s << indent << "poseYaw: ";
    Printer<float>::stream(s, indent + "  ", v.poseYaw);
    s << indent << "imuAvailable: ";
    Printer<int32_t>::stream(s, indent + "  ", v.imuAvailable);
    s << indent << "incr_octree: ";
    s << std::endl;
    Printer< ::std_msgs::Int8MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.incr_octree);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRID_MAP_MESSAGE_INC_OCTREE_H
